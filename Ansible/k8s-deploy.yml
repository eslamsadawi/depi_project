- hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    image_name: "depi-shop:latest"
    host_port: 8080  # Changed to 8080 to avoid requiring root privileges
  tasks:
    - name: Check if minikube is installed
      command: which minikube
      register: minikube_installed
      ignore_errors: yes
      
    - name: Display minikube status
      debug:
        msg: "Minikube is installed"
      when: minikube_installed.rc == 0
      
    - name: Check minikube status
      command: minikube status
      register: minikube_status
      ignore_errors: yes
      when: minikube_installed.rc == 0
      
    - name: Display minikube status
      debug:
        var: minikube_status
      when: minikube_installed.rc == 0
      
    - name: Start minikube if not running
      command: minikube start
      register: minikube_start
      when: minikube_installed.rc == 0 and (minikube_status.rc != 0 or "host Stopped" in minikube_status.stdout)
      ignore_errors: yes
      
    - name: Display minikube start results
      debug:
        var: minikube_start
      when: minikube_start is defined and minikube_start.changed
      
    - name: Wait for minikube to initialize (30 seconds)
      wait_for:
        timeout: 30
      when: minikube_start is defined and minikube_start.changed

    - name: Check Kubernetes connectivity
      command: kubectl cluster-info
      register: cluster_info
      ignore_errors: yes
      
    - name: Display cluster info if successful
      debug:
        msg: "{{ cluster_info.stdout_lines }}"
      when: cluster_info.rc == 0

    - name: Display error message if connectivity fails
      debug:
        msg: "Failed to connect to Kubernetes cluster. Check connectivity and cluster status."
      when: cluster_info.rc != 0

    - name: Check if Docker is running
      command: systemctl status docker
      register: docker_status
      ignore_errors: yes

    - name: List available Docker images
      command: docker images
      register: docker_images
      ignore_errors: yes

    - name: Display available Docker images
      debug:
        var: docker_images.stdout_lines
      when: docker_images is defined

    # Ensure minikube can access the Docker image using these alternative methods
    - name: Method 1 - Load image directly into minikube
      command: minikube image load {{ image_name }}
      register: image_load_result
      ignore_errors: yes
      when: cluster_info.rc == 0

    - name: Display image loading result
      debug:
        var: image_load_result
      when: image_load_result is defined
      
    - name: Method 2 - Configure to use minikube Docker daemon
      shell: eval $(minikube docker-env) && docker build -t {{ image_name }} {{ ansible_env.HOME }}/docker/depi-shop
      ignore_errors: yes
      when: cluster_info.rc == 0 and (image_load_result.rc != 0 or image_load_result is not defined)
      register: minikube_docker_build
      
    - name: Display minikube docker build result
      debug:
        var: minikube_docker_build
      when: minikube_docker_build is defined

    # Update the deployment YAML to use imagePullPolicy: Never
    - name: Create a temp file with modified deployment
      copy:
        dest: ../K8S/temp-deployment.yml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mylab1-depi-shop
            labels:
              app: depi-shop
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: depi-shop
            template:
              metadata:
                labels:
                  app: depi-shop
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "80"
                  prometheus.io/path: "/metrics"
              spec:
                containers:
                - name: depi-shop
                  image: {{ image_name }}
                  imagePullPolicy: Never
                  ports:
                  - containerPort: 80
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 1

    # Kubernetes Deployment tasks - only run if cluster is available
    - name: deploy depi shop on kubernetes with modified deployment
      command: kubectl apply -f temp-deployment.yml --validate=false
      args:
        chdir: ../K8S
      register: deployment_result
      ignore_errors: yes
      when: cluster_info.rc == 0

    - name: Debug deployment result
      debug:
        var: deployment_result
      when: cluster_info.rc == 0
      
    - name: create service for depi shop
      command: kubectl apply -f depi-shop-svc.yml --validate=false
      args:
        chdir: ../K8S
      register: service_result
      ignore_errors: yes
      when: cluster_info.rc == 0

    - name: Debug service result
      debug:
        var: service_result
      when: cluster_info.rc == 0

    - name: Update deployment with new pods if image updated in docker hub
      command: kubectl rollout restart deployment.apps/mylab1-depi-shop
      ignore_errors: yes
      when: cluster_info.rc == 0 and deployment_result.rc == 0

    - name: Wait for pods to be ready (60 seconds)
      shell: |
        start_time=$(date +%s)
        while [ $(($(date +%s) - start_time)) -lt 60 ]; do
          status=$(kubectl get pods -l app=depi-shop -o jsonpath='{.items[*].status.phase}')
          if [[ "$status" == *"Running"* ]]; then
            echo "Pods are running"
            exit 0
          fi
          echo "Waiting for pods... Current status: $(kubectl get pods)"
          sleep 5
        done
        echo "Timeout waiting for pods to be ready"
        exit 1
      register: pod_wait_result
      ignore_errors: yes
      when: cluster_info.rc == 0 and deployment_result.rc == 0

    - name: Show pod details if there are issues
      command: kubectl describe pods -l app=depi-shop
      register: pod_details
      when: cluster_info.rc == 0
      ignore_errors: yes
      
    - name: Display pod details
      debug:
        var: pod_details.stdout_lines
      when: pod_details is defined
      
    - name: Get service URL from minikube
      command: minikube service mylab1-service --url
      register: service_url
      ignore_errors: yes
      when: cluster_info.rc == 0 and service_result.rc == 0
      
    - name: Display service URL
      debug:
        var: service_url
      when: service_url is defined
      
    # New tasks for exposing the service to the public
    - name: Get minikube IP
      command: minikube ip
      register: minikube_ip
      when: cluster_info.rc == 0
      ignore_errors: yes
      
    - name: Get NodePort of the service
      shell: kubectl get service mylab1-service -o jsonpath='{.spec.ports[0].nodePort}'
      register: node_port
      when: cluster_info.rc == 0
      ignore_errors: yes
      
    - name: Display minikube IP and NodePort
      debug:
        msg: "Minikube IP: {{ minikube_ip.stdout }}, NodePort: {{ node_port.stdout }}"
      when: minikube_ip is defined and node_port is defined and minikube_ip.rc == 0 and node_port.rc == 0
      
    - name: Check if socat is installed
      command: which socat
      register: socat_installed
      ignore_errors: yes
      
    - name: Install socat if not present
      apt:
        name: socat
        state: present
      become: yes
      when: socat_installed.rc != 0
      ignore_errors: yes

    - name: Create systemd service file for port forwarding
      copy:
        dest: /etc/systemd/system/minikube-port-forward.service
        content: |
          [Unit]
          Description=Minikube Port Forward Service
          After=network.target
          
          [Service]
          ExecStart=/usr/bin/socat TCP-LISTEN:{{ host_port }},fork,reuseaddr TCP:{{ minikube_ip.stdout }}:{{ node_port.stdout }}
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
      become: yes
      when: minikube_ip is defined and node_port is defined and minikube_ip.rc == 0 and node_port.rc == 0
      register: systemd_service
      ignore_errors: yes
      
    - name: Reload systemd
      systemd:
        daemon_reload: yes
      become: yes
      when: systemd_service is changed
      ignore_errors: yes
      
    - name: Enable and start minikube port forward service
      systemd:
        name: minikube-port-forward
        state: restarted
        enabled: yes
      become: yes
      when: minikube_ip is defined and node_port is defined and minikube_ip.rc == 0 and node_port.rc == 0
      ignore_errors: yes
      
    - name: Verify if port forwarding is working
      wait_for:
        host: localhost
        port: "{{ host_port }}"
        timeout: 10
      ignore_errors: yes
      register: port_check
      
    - name: Show port forwarding status
      debug:
        msg: "Port forwarding is {{ 'active' if port_check.failed == false else 'not working' }}"
        
    - name: Alternative approach - use kubectl port-forward in background
      shell: |
        nohup kubectl port-forward --address 0.0.0.0 service/mylab1-service {{ host_port }}:80 > /tmp/port-forward.log 2>&1 &
        echo $! > /tmp/port-forward.pid
      when: port_check.failed | default(true)
      ignore_errors: yes
      
    - name: Check if AWS EC2 instance
      stat:
        path: /sys/hypervisor/uuid
      register: hypervisor_uuid
      ignore_errors: yes
      
    - name: Get AWS security group info
      shell: |
        if grep -q "^ec2" /sys/hypervisor/uuid 2>/dev/null; then
          echo "This is an EC2 instance. Ensure port {{ host_port }} is open in your security group."
        else
          echo "Not an EC2 instance or unable to determine"
        fi
      register: aws_info
      ignore_errors: yes
      
    - name: Show AWS info
      debug:
        var: aws_info.stdout_lines
      when: aws_info is defined
      
    - name: Get public IP of the host
      shell: curl -s http://checkip.amazonaws.com || curl -s https://api.ipify.org || hostname -I | awk '{print $1}'
      register: public_ip
      ignore_errors: yes
      
    - name: Display access information
      debug:
        msg: "Your application should be accessible at http://{{ public_ip.stdout }}:{{ host_port }}"
      when: public_ip is defined
      
    # Monitoring Stack Deployment
    - name: Deploy monitoring - node-exporter
      command: kubectl apply -f node-exporter-deployment.yaml
      args:
        chdir: ../K8S/monitoring
      register: node_exporter_result
      ignore_errors: yes
      when: cluster_info.rc == 0
      
    - name: Deploy monitoring - cadvisor
      command: kubectl apply -f cadvisor-deployment.yaml
      args:
        chdir: ../K8S/monitoring
      register: cadvisor_result
      ignore_errors: yes
      when: cluster_info.rc == 0
      
    - name: Deploy monitoring - kube-state-metrics
      command: kubectl apply -f kube-state-metrics-deployment.yaml
      args:
        chdir: ../K8S/monitoring
      register: kube_state_result
      ignore_errors: yes
      when: cluster_info.rc == 0
      
    - name: Deploy monitoring - prometheus config
      command: kubectl apply -f prometheus-config.yaml
      args:
        chdir: ../K8S/monitoring
      register: prom_config_result
      ignore_errors: yes
      when: cluster_info.rc == 0
      
    - name: Deploy monitoring - prometheus deployment
      command: kubectl apply -f prometheus-deployment.yaml
      args:
        chdir: ../K8S/monitoring
      register: prometheus_result
      ignore_errors: yes
      when: cluster_info.rc == 0 and prom_config_result.rc == 0
      
    - name: Deploy monitoring - grafana config
      command: kubectl apply -f grafana-config.yaml
      args:
        chdir: ../K8S/monitoring
      register: grafana_config_result
      ignore_errors: yes
      when: cluster_info.rc == 0
      
    - name: Deploy monitoring - grafana deployment
      command: kubectl apply -f grafana-deployment.yaml
      args:
        chdir: ../K8S/monitoring
      register: grafana_result
      ignore_errors: yes
      when: cluster_info.rc == 0 and grafana_config_result.rc == 0
      
    - name: Wait for monitoring pods to be ready (30 seconds)
      shell: |
        start_time=$(date +%s)
        while [ $(($(date +%s) - start_time)) -lt 30 ]; do
          prom_status=$(kubectl get pods -l app=prometheus -o jsonpath='{.items[*].status.phase}')
          grafana_status=$(kubectl get pods -l app=grafana -o jsonpath='{.items[*].status.phase}')
          if [[ "$prom_status" == *"Running"* && "$grafana_status" == *"Running"* ]]; then
            echo "Monitoring pods are running"
            exit 0
          fi
          echo "Waiting for monitoring pods..."
          sleep 5
        done
        echo "Continuing deployment process"
        exit 0
      register: monitoring_wait
      ignore_errors: yes
      when: cluster_info.rc == 0 and prometheus_result.rc == 0 and grafana_result.rc == 0
      
    - name: Get NodePort of the monitoring services
      shell: |
        echo "Prometheus port: $(kubectl get service prometheus-service -o jsonpath='{.spec.ports[0].nodePort}')"
        echo "Grafana port: $(kubectl get service grafana-service -o jsonpath='{.spec.ports[0].nodePort}')"
      register: monitoring_ports
      when: cluster_info.rc == 0 and prometheus_result.rc == 0 and grafana_result.rc == 0
      ignore_errors: yes
      
    - name: Display monitoring access information
      debug:
        msg: |
          Monitoring stack deployed:
          - Prometheus UI: http://{{ minikube_ip.stdout }}:{{ monitoring_ports.stdout_lines[0] | regex_search('\\d+$') }}
          - Grafana dashboard: http://{{ minikube_ip.stdout }}:{{ monitoring_ports.stdout_lines[1] | regex_search('\\d+$') }} (default login: admin/admin)
          
          NOTE: To access dashboards, you may need to set up port forwarding similar to the application service.
      when: minikube_ip is defined and monitoring_ports is defined and minikube_ip.rc == 0
      
    # Extract Grafana NodePort for port forwarding
    - name: Extract Grafana NodePort
      set_fact:
        grafana_port: "{{ monitoring_ports.stdout_lines[1] | regex_search('\\d+$') }}"
      when: monitoring_ports is defined and monitoring_ports.stdout_lines|length > 1
      
    - name: Set default grafana host port
      set_fact:
        grafana_host_port: 3000
      
    # Setup Port Forwarding for Grafana
    - name: Create systemd service file for Grafana port forwarding
      copy:
        dest: /etc/systemd/system/grafana-port-forward.service
        content: |
          [Unit]
          Description=Grafana Port Forward Service
          After=network.target
          
          [Service]
          ExecStart=/usr/bin/socat TCP-LISTEN:{{ grafana_host_port }},fork,reuseaddr TCP:{{ minikube_ip.stdout }}:{{ grafana_port }}
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
      become: yes
      when: minikube_ip is defined and grafana_port is defined and minikube_ip.rc == 0
      register: grafana_systemd_service
      ignore_errors: yes
      
    - name: Reload systemd for Grafana service
      systemd:
        daemon_reload: yes
      become: yes
      when: grafana_systemd_service is changed
      ignore_errors: yes
      
    - name: Enable and start Grafana port forward service
      systemd:
        name: grafana-port-forward
        state: restarted
        enabled: yes
      become: yes
      when: minikube_ip is defined and grafana_port is defined and minikube_ip.rc == 0
      ignore_errors: yes
      
    - name: Verify if Grafana port forwarding is working
      wait_for:
        host: localhost
        port: "{{ grafana_host_port }}"
        timeout: 10
      ignore_errors: yes
      register: grafana_port_check
      
    - name: Show Grafana port forwarding status
      debug:
        msg: "Grafana port forwarding is {{ 'active' if grafana_port_check.failed == false else 'not working' }}"
        
    - name: Alternative approach - use kubectl port-forward for Grafana in background
      shell: |
        nohup kubectl port-forward --address 0.0.0.0 service/grafana-service {{ grafana_host_port }}:3000 > /tmp/grafana-port-forward.log 2>&1 &
        echo $! > /tmp/grafana-port-forward.pid
      when: grafana_port_check.failed | default(true)
      ignore_errors: yes
      
    - name: Display Grafana access information
      debug:
        msg: "Your Grafana dashboard should be accessible at http://{{ public_ip.stdout }}:{{ grafana_host_port }} (default login: admin/admin)"
      when: public_ip is defined

